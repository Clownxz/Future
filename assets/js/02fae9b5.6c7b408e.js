"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,u=function(e,t){if(null==e)return{};var n,r,u={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(u[n]=e[n]);return u}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(u[n]=e[n])}return u}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,u=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=u,d=c["".concat(i,".").concat(m)]||c[m]||h[m]||a;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,u=t&&t.mdxType;if("string"==typeof e||u){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:u,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var r=n(87462),u=(n(67294),n(3905));const a={},o="Future",l={type:"mdx",permalink:"/Luau-Future/",source:"@site/pages/index.md",title:"Future",description:"View Docs",frontMatter:{}},i=[{value:"Luau Futures",id:"luau-futures",level:2},{value:"Why use this?",id:"why-use-this",level:3},{value:"Why I use Luau Futures",id:"why-i-use-luau-futures",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Installing with Wally",id:"installing-with-wally",level:3},{value:"Building with Rojo",id:"building-with-rojo",level:3}],s={toc:i},p="wrapper";function c(e){let{components:t,...n}=e;return(0,u.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"future"},"Future"),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"},(0,u.kt)("a",{parentName:"strong",href:"https://yetanotherclown.github.io/Luau-Future/"},"View Docs"))),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"A Minimal, Typed Future Implementation inspired by the concept of Futures from the Rust Ecosystem.")),(0,u.kt)("h2",{id:"luau-futures"},"Luau Futures"),(0,u.kt)("p",null,"Futures represent a value that does not exist quite yet, similar to Promises. This makes\nFutures or Promises perfect to use when handling asynchronous calls."),(0,u.kt)("hr",null),(0,u.kt)("h3",{id:"why-use-this"},"Why use this?"),(0,u.kt)("p",null,"Don't. Use Promises. You shouldn't need to use this and shouldn't unless it fits a certain use case."),(0,u.kt)("p",null,"Promises have Chaining, Joining, Cancellation, and many more features that Futures don't have."),(0,u.kt)("p",null,"Futures are simply\nbuilt to be performant, unlike Promises. Even then, the performance gains you may see will be so insignificant\nyou'd only be hurting yourself by using Futures."),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"See ",(0,u.kt)("a",{parentName:"p",href:"https://eryn.io/roblox-lua-promise/"},"Roblox Lua Promise"),"\nand ",(0,u.kt)("a",{parentName:"p",href:"https://eryn.io/roblox-lua-promise/docs/WhyUsePromises"},"Why Use Promises?")," by Evaera")),(0,u.kt)("h3",{id:"why-i-use-luau-futures"},"Why I use Luau Futures"),(0,u.kt)("p",null,"I needed to represent dozens of values from asynchronous calls within a single frame, each frame. Promises proved to not be performant and full of unnecessary features I had no need of, this is where Luau Futures comes in."),(0,u.kt)("p",null,"I built Luau Futures to be used within systems that run every frame, built for a library such as ",(0,u.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter"},"Matter"),", which had no built-in method for handling Asynchronous Calls."),(0,u.kt)("p",null,"With minimal features and with use of my ",(0,u.kt)("a",{parentName:"p",href:"https://github.com/YetAnotherClown/ThreadPool"},"ThreadPool")," library, I created a minimal and performant alternative to promises fit for my use case."),(0,u.kt)("hr",null),(0,u.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-lua"},'local Future = require(path.to.module)\n\n-- Create a future\nlocal myFuture = Future(function(...)\n    -- Something that yields\nend, ...)\n\n-- Poll the Future to see if it is ready.\nif myFuture:isReady() then\n    local ... = myFuture:output()\n    \n    -- Do something\nend\n\n-- Poll the Future to see if it is still pending.\nif myFuture:isPending() then\n    warn("Future is still pending!")\nend\n')),(0,u.kt)("p",null,"In a ",(0,u.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter"},"Matter")," System:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-lua"},"-- Basic concept of Futures in a Matter System\nlocal function exampleSystem(world)\n\n    -- Create Futures\n    for id in world:query():without(Future) do\n        world:insert(id, Future {\n            future = Future(function()\n                -- Something that yields\n            end)\n        })\n    end\n\n    -- Poll Futures\n    for id, future in world:query(Future) do\n        local future = future.future\n\n        if future:isReady() then\n            local result = myFuture:output()\n\n            if result:ok() then\n                local returnedValues = result()\n                -- Do something\n            elseif result:error() then\n                warn(result())\n            end\n\n            world:remove(id, Future)\n        end\n    end\nend\n")),(0,u.kt)("hr",null),(0,u.kt)("h3",{id:"installing-with-wally"},"Installing with Wally"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nFuture = "yetanotherclown/future@1.0.0"\n')),(0,u.kt)("p",null,"Note: Wally does not export types automatically and will display a type-error in one of the Dependencies.\nTo fix this, see ",(0,u.kt)("a",{parentName:"p",href:"https://github.com/JohnnyMorganz/wally-package-types"},"https://github.com/JohnnyMorganz/wally-package-types"),"."),(0,u.kt)("h3",{id:"building-with-rojo"},"Building with Rojo"),(0,u.kt)("p",null,"To build yourself, use: "),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-bash"},'rojo build -o "Future.rbxm"\n')),(0,u.kt)("p",null,"For more help, check out ",(0,u.kt)("a",{parentName:"p",href:"https://rojo.space/docs"},"the Rojo documentation"),"."))}c.isMDXComponent=!0}}]);