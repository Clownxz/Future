"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[903],{2771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"intro","title":"Luau Futures","description":"An introduction to Luau Futures","source":"@site/docs/intro.mdx","sourceDirName":".","slug":"/intro","permalink":"/Luau-Future/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/YetAnotherClown/Luau-Future/edit/master/docs/intro.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Luau Futures","description":"An introduction to Luau Futures","sidebar_position":1},"sidebar":"defaultSidebar","next":{"title":"Installation","permalink":"/Luau-Future/docs/installation"}}');var u=n(4848),s=n(8453);n(6540),n(2303);const o={title:"Luau Futures",description:"An introduction to Luau Futures",sidebar_position:1},i=void 0,a={},l=[];function c(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(t.p,{children:"A future represents a read-only asynchronous value, one that may\r\nnot have finished computation yet. A basic future could look like:"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-lua",children:'local Futures = require("@packages/Futures")\r\nlocal Future = Futures.Future\r\n\r\nlocal myFuture = Future.new(function()\r\n    yield()\r\n    return 1, 2, 3\r\nend)\n'})}),"\n",(0,u.jsx)(t.p,{children:"When you create a future, it wont begin execution until it is either\r\npolled or awaited."}),"\n",(0,u.jsx)(t.p,{children:"Polling will advance the future to it's next resumption point every\r\ntime that it is called, returning a [Poll] to let you check the status\r\nof the future."}),"\n",(0,u.jsx)(t.p,{children:"If the Poll is ready, you can also unwrap it to get the [Result]."}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-lua",children:"local poll = myFuture:poll()\r\nif poll:isReady() then\r\n    local result = poll:unwrap()\r\n    -- Handle result\r\nend\n"})}),"\n",(0,u.jsx)(t.p,{children:"Awaiting a future will yield the current thread until the future\r\nfinishes execution. As such, it is recommended that you only use\r\nthe await method within other futures, preferring to use poll instead."}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-lua",children:"local result = myFuture:await()\r\n-- Handle result\n"})}),"\n",(0,u.jsxs)(t.p,{children:["To read the result, you can use [Result",":isOk","] or [Result",":isErr","] to\r\ncheck what type the Result is."]}),"\n",(0,u.jsxs)(t.p,{children:["You can then use [Result",":unwrapOk","] or [Result",":unwrapErr","] to get the\r\nvalue of the result."]}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-lua",children:"if result:isOk() then\r\n    print(result:unwrapOk()) -- 1, 2, 3\r\nelseif result:isErr() then\r\n    warn(result:unwrapErr()) -- An error occurred\r\nend\n"})}),"\n",(0,u.jsx)(t.p,{children:"There are also several other methods for chaining, combining, and\r\nmapping futures, as well as other utilities for working with futures."}),"\n",(0,u.jsxs)(t.p,{children:["It is suggested to read the ",(0,u.jsx)(t.a,{href:"/api/Future",children:"API Documentation"})," for more\r\ninformation about these methods."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,u.jsx)(t,{...e,children:(0,u.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const u={},s=r.createContext(u);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(u):e.components||u:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);