"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,u=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,m=c["".concat(i,".").concat(d)]||c[d]||h[d]||u;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var u=n.length,o=new Array(u);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<u;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>u,metadata:()=>l,toc:()=>i});var r=n(87462),a=(n(67294),n(3905));const u={},o="Future",l={type:"mdx",permalink:"/Luau-Future/",source:"@site/pages/index.md",title:"Future",description:"View Docs",frontMatter:{}},i=[{value:"Luau Futures",id:"luau-futures",level:2},{value:"Why use this?",id:"why-use-this",level:3},{value:"Why I use Luau Futures",id:"why-i-use-luau-futures",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Installing with Wally",id:"installing-with-wally",level:3},{value:"Building with Rojo",id:"building-with-rojo",level:3}],s={toc:i},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"future"},"Future"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://yetanotherclown.github.io/Luau-Future/"},"View Docs"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A Minimal, Typed Future Implementation inspired by the concept of Futures from the Rust Ecosystem.")),(0,a.kt)("h2",{id:"luau-futures"},"Luau Futures"),(0,a.kt)("p",null,"Futures are a Data-Driven approach to asynchronous calls, what this means is that Futures\nrepresent a value that does not exist quite yet, similar to Promises."),(0,a.kt)("p",null,"Unlike Promises, Futures take on a Data-Driven approach as opposed to a Event-Driven approach.\nFutures have no events for you to react to, there is no ",(0,a.kt)("inlineCode",{parentName:"p"},"andThen")," or any other event-like methods\nor functions for Futures. "),(0,a.kt)("p",null,"In order to use Futures, you must do something called polling, you can call ",(0,a.kt)("inlineCode",{parentName:"p"},"isReady")," to see if the\nfuture has a result ready, and then you can call ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," to receive a result.\nThe future can either be ok or an error, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ok")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," methods respectively to check.\nTo get the value ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," you can call the result as a function."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"why-use-this"},"Why use this?"),(0,a.kt)("p",null,"Don't. Use Promises. You shouldn't need to use this and shouldn't unless it fits a certain use case.\nPromises have Chaining, Joining, Cancellation, and many more features that Futures don't have."),(0,a.kt)("p",null,"Futures are simply a lightweight alternative to Promises that uses long polling. Any gains you may get from\nusing Futures will be so insignificant you'd only be hurting yourself by using them in most cases."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"See ",(0,a.kt)("a",{parentName:"p",href:"https://eryn.io/roblox-lua-promise/"},"Roblox Lua Promise"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"https://eryn.io/roblox-lua-promise/docs/WhyUsePromises"},"Why Use Promises?")," by Evaera")),(0,a.kt)("h3",{id:"why-i-use-luau-futures"},"Why I use Luau Futures"),(0,a.kt)("p",null,"When writing code that ran every frame I found myself needing to represent yielding asynchronous calls in a way where\nI could store the future value and use it in a future frame. Promises felt like a good first step, but it just felt like\nthey did not fit the Data-Driven architecture I was going for, with Promises being Event-Driven."),(0,a.kt)("p",null,"So here comes Luau Futures, a Data-Driven Approach to handling asynchronous code,\nbuilt for a library such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter"},"Matter"),", which had no built-in method for handling Asynchronous Calls."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Future = require(path.to.module)\n\n-- Create a future\nlocal myFuture = Future(function(...)\n    -- Something that yields\nend, ...)\n\n-- Poll the Future to see if it is ready.\nif myFuture:isReady() then\n    local result = myFuture:output()\n    local ... = result()\n    \n    -- Do something\nend\n\n-- Poll the Future to see if it is still pending.\nif myFuture:isPending() then\n    warn("Future is still pending!")\nend\n')),(0,a.kt)("p",null,"In a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter"},"Matter")," System:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Basic concept of Futures in a Matter System\nlocal function exampleSystem(world)\n\n    -- Create Futures\n    for id in world:query():without(Future) do\n        world:insert(id, Future {\n            future = Future(function()\n                -- Something that yields\n            end)\n        })\n    end\n\n    -- Poll Futures\n    for id, future in world:query(Future) do\n        local future = future.future\n\n        if future:isReady() then\n            local result = myFuture:output()\n\n            if result:ok() then\n                local returnedValues = result()\n                -- Do something\n            elseif result:error() then\n                warn(result())\n            end\n\n            world:remove(id, Future)\n        end\n    end\nend\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"installing-with-wally"},"Installing with Wally"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nFuture = "yetanotherclown/future@1.0.0"\n')),(0,a.kt)("p",null,"Note: Wally does not export types automatically and will display a type-error in one of the Dependencies.\nTo fix this, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/JohnnyMorganz/wally-package-types"},"https://github.com/JohnnyMorganz/wally-package-types"),"."),(0,a.kt)("h3",{id:"building-with-rojo"},"Building with Rojo"),(0,a.kt)("p",null,"To build yourself, use: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'rojo build -o "Future.rbxm"\n')),(0,a.kt)("p",null,"For more help, check out ",(0,a.kt)("a",{parentName:"p",href:"https://rojo.space/docs"},"the Rojo documentation"),"."))}c.isMDXComponent=!0}}]);